@page "/TodoList/Index"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.Text.Json
@using BlazorAppTest.Client.Models.ViewModels;
@using BlazorAppTest.Client.Shared.TodoList;

<h1>TodoList</h1>
<p>This component demonstrates fetching TodoList data from the server.</p>
<hr />
<div class="container">
    <div class="row">
        <div class="col">
            <div class="float-right">
                <button class="btn btn-danger" @onclick="Reload"><span class="oi oi-reload"></span></button>
                <button class="btn btn-danger"
                        draggable="true"
                        ondragover="event.preventDefault();"
                        @ondrop="HandleDrop">
                    <span class="oi oi-trash"></span>
                </button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-11">
            <input type="text" class="form-control" placeholder="Add a TodoList" @bind="newTodoText" />
        </div>
        <div class="col-1">
            <div class="float-right">
                <button class="btn btn-primary" @onclick="AddListName">Add</button>
            </div>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col">
            <div class="card-deck">
                @if (todoLists == null)
                {
                    <p><em>Loading...</em></p>}
                else
                {
                    foreach (var item in todoLists)
                    {
                        <List todoList="@item" OnReturnItemId="@ReturnItemId" OnReturnListId="@(() => ReturnListId(dragStartArgs))"></List>}
                }
            </div>
        </div>
    </div>
</div>
@code {

    private List<TodoList> todoLists;
    private HandleDragStartArgs dragStartArgs;

    private string newTodoText;
    private string functionName;

    protected override async Task OnInitializedAsync()
    {
        todoLists = await Http.GetFromJsonAsync<List<TodoList>>("api/TodoList/Index", new JsonSerializerOptions
        {
            ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.Preserve,
            PropertyNamingPolicy = null
        });

        if (dragStartArgs == null)
        {
            dragStartArgs = new HandleDragStartArgs();
        }

    }


    private async Task AddListName()
    {
        //TODO:要加資料驗證
        if (!string.IsNullOrEmpty(newTodoText))
        {
            int lastSort = await Http.GetFromJsonAsync<int>("/api/TodoList/GetLastSort");
            int newSort = lastSort + 1;

            var todoList = new TodoList()
            {
                Title = newTodoText,
                Sort = newSort
            };

            var jsonText = JsonSerializer.Serialize(todoList);

            var response = await Http.PostAsJsonAsync<string>("api/TodoList/CreateList", jsonText);

            if (response.IsSuccessStatusCode)
                NavigationManager.NavigateTo("/TodoList/Index", true);
            else
                Console.WriteLine(response.Content);

        }
    }

    void Reload() => NavigationManager.NavigateTo("/TodoList/Index", true);

    private async Task HandleDrop()
    {
        //DeleteItem
        if (dragStartArgs == null) return;

        var response = await Http.DeleteAsync($"api/TodoList/{dragStartArgs.fxName}/" + dragStartArgs.listId);

        if (response.IsSuccessStatusCode)
            NavigationManager.NavigateTo("/TodoList/Index", true);
        else
            Console.WriteLine(response.Content);

    }

    private void ReturnItemId(HandleDragStartArgs args)
    {
        dragStartArgs = args;
    }

    private void ReturnListId(HandleDragStartArgs args)
    {
        dragStartArgs = args;
    }

    public class HandleDragStartArgs
    {
        public int listId { get; set; }
        public string fxName { get; set; }
    }
}
