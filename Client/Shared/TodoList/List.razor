@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.Text.Json
@using BlazorAppTest.Client.Models.ViewModels;

<div class="card" draggable="true"
     @ondragstart="HandleDragStart">
    <h5 class="card-header">@todoList.Title</h5>
    <div class="card-body">
        <div class="row">
            <div class="col-10">
                <input type="text" class="form-control" placeholder="Add a TodoItem" @bind="newItemText" />
            </div>
            <div class="col-2">
                <div class="float-right">
                    <button class="btn btn-primary" @onclick="(() => AddTaskName(todoList.ListId))">Add</button>
                </div>
            </div>
        </div>
        <hr />

        @foreach (var item in todoList.TodoItems)
        {
            <Todo todoItem="@item" OnReturnItemId="@((args) => ReturnItemId(args., args.fxName))" />}
    </div>

</div>


@code{
    [Parameter]
    public EventCallback<HandleDragStartArgs> OnReturnListId { get; set; }

    [Parameter]
    public EventCallback<(int, string)> OnReturnItemId { get; set; }

    [Parameter]
    public TodoList todoList { get; set; }


    private string newItemText;

    private async Task AddTaskName(int? listId)
    {
        // TODO:要加資料驗證
        int lastSort = await Http.GetFromJsonAsync<int>("/api/TodoList/GetLastSortByItem/" + listId);
        int newSort = lastSort + 1;

        var todoItemResponse = new TodoItem()
        {
            ListId = (int)todoList.ListId,
            Sort = newSort,
            TaskName = newItemText,
            Completed = false
        };

        var jsonText = JsonSerializer.Serialize(todoItemResponse);
        var response = await Http.PostAsJsonAsync<string>("api/TodoList/CreateTask", jsonText);

        if (response.IsSuccessStatusCode)
            NavigationManager.NavigateTo("/TodoList/Index", true);
        else
            Console.WriteLine(response.Content);
    }

    private async Task ReturnItemId(int itemId, string fxName) => await OnReturnItemId.InvokeAsync((itemId, fxName));
    //new OnCheckEventArgs { IsChecked = checked, ItemId = @Id }

    //((int)todoList.ListId, "DeleteList")
    private async Task HandleDragStart() => await OnReturnListId.InvokeAsync(new HandleDragStartArgs { listId = (int)todoList.ListId, fxName = "DeleteList" });


    public class HandleDragStartArgs
    {
        public int listId { get; set; }
        public string fxName { get; set; }
    }
    //private void HandleDragEnter()
    //{
    //    //if (ListStatus == Container.Payload.Status) return;

    //    //if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status))
    //    //{
    //    //    dropClass = "no-drop";
    //    //}
    //    //else
    //    //{
    //    //    dropClass = "can-drop";
    //    //}
    //}

    //private void HandleDragLeave()
    //{
    //    //dropClass = "";
    //}

    //private async Task HandleDrop()
    //{
    //    //dropClass = "";

    //    //if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status)) return;

    //    //await Container.UpdateJobAsync(ListStatus);
    //}

}
