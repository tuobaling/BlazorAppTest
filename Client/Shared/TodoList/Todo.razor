@inject HttpClient Http
@inject NavigationManager NavigationManager
@using BlazorAppTest.Client.Models.ViewModels;
@using System.Text.Json

<div class="card-text" draggable="true"
     @ondragstart="HandleDragStart">
    <div class="form-check">
        @*//透過Lambda的e傳遞事件中的值*@
        <input class="form-check-input" @onchange="(e => UpdateCompleted(e.Value))" type="checkbox" value="" id="@todoItem.ItemId" checked="@todoItem.Completed">
        <label class="form-check-label text-muted" for="@todoItem.ItemId">
            @if (todoItem.Completed)
            {
                <del>@todoItem.TaskName</del>}
            else
            {
                @todoItem.TaskName
            }
        </label>
    </div>
</div>

@code{
    [Parameter]
    public EventCallback<TodoListViewModel> OnReturnId { get; set; }

    [Parameter]
    public TodoItem todoItem { get; set; }

    [Parameter]
    public TodoListViewModel dragStartArgs { get; set; }

    protected override Task OnInitializedAsync()
    {
        if (dragStartArgs == null)
        {
            dragStartArgs = new TodoListViewModel();
        }

        return Task.CompletedTask;
    }

    private async Task UpdateCompleted(object isCompeleted) //改為SPA動態更新不重整
    {
        //// TODO:要加資料驗證
        todoItem.Completed = (bool)isCompeleted; //直接改物件的值

        var response = await Http.PutAsJsonAsync<TodoItem>("api/TodoList/EditByItem", todoItem); //改以物件傳遞，因為PostAsJsonAsync本來就會自動序列化為Json，同時接回物件取得Id

        if (response.IsSuccessStatusCode)
            Console.WriteLine("It's Scuessed !"); //將訊息寫在這
        else
        {
            todoItem.Completed = todoItem.Completed; //失敗還原
            Console.WriteLine("It's Failed !"); //將訊息寫在這
        }

        await InvokeAsync(() => base.StateHasChanged()); //重新建構畫面元件，無倫成功與否都要把畫面更新和資料庫一致
    }

    private async Task HandleDragStart()
    {
        dragStartArgs.listId = todoItem.ItemId;
        dragStartArgs.fxName = "DeleteItem";

        await OnReturnId.InvokeAsync(dragStartArgs);

    }
}