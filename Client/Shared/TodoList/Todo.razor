@inject HttpClient Http
@inject NavigationManager NavigationManager
@using BlazorAppTest.Client.Models.ViewModels;
@using System.Text.Json

<div class="card-text">
    <div class="form-check">
        @if (IsCompeleted)
        {
            <input class="form-check-input" @onchange="(() => UpdateCompleted(!IsCompeleted))" type="checkbox" value="" id="@ItemIndex" checked="checked">
            <label class="form-check-label text-muted" for="@ItemIndex"><del>@TaskName</del></label>}
        else
        {
            <input class="form-check-input" @onchange="(() => UpdateCompleted(!IsCompeleted))" type="checkbox" value="" id="@ItemIndex">
            <label class="form-check-label text-muted" for="@ItemIndex">@TaskName</label>}

    </div>
</div>

@code{
    [Parameter]
    public string TaskName { get; set; }

    [Parameter]
    public int ItemIndex { get; set; }

    [Parameter]
    public int Sort { get; set; }

    [Parameter]
    public int ParentId { get; set; }

    [Parameter]
    public bool IsCompeleted { get; set; }

    private async Task UpdateCompleted(bool isCompeleted)
    {
        //// TODO:要加資料驗證
        var todoItem = new TodoItem
        {
            ItemId = ItemIndex,
            Completed = isCompeleted
        };

        var jsonText = JsonSerializer.Serialize(todoItem);
        var response = await Http.PutAsJsonAsync<string>("api/TodoList/EditByItem", jsonText);

        if (response.IsSuccessStatusCode)
            NavigationManager.NavigateTo("/TodoList/Index", true);
        else
            Console.WriteLine(response.Content);
    }

    //[Parameter]
    //public EventCallback<int> DeleteItem { get; set; }

    ////void Delete()
    ////{
    ////    DeleteItem.InvokeAsync(ItemIndex);
    ////}

    //private async Task Delete()
    //{
    //    bool result = await js.InvokeAsync<bool>("SweetConfirm", "Delete", $"確定要刪除{TaskName}?");
    //    if (result)
    //    {
    //        await DeleteItem.InvokeAsync(ItemIndex);
    //    }
    //}
}